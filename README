AI-Based Cyber Security Threats Prediction üõ°Ô∏è

An intelligent system that acts as an autonomous agent for network security. This project leverages an XGBoost machine learning model to monitor, detect, and respond to potential cyber threats in real time, presenting the findings on an intuitive web-based dashboard.

üöÄ Live Demo & Deployment

Frontend Dashboard: https://model-frontend.yashdev.tech/
Backend API Endpoint: https://model-backend.yashdev.tech/health

üèõÔ∏è System Architecture

The project follows a modern three-tier architecture, ensuring scalability and separation of concerns.
React Frontend: A dynamic user interface for visualizing threat data and system status.
Node.js Backend: The central API that handles business logic, connects to the database, and communicates with the model server.
Flask Model-Server: A dedicated Python server that serves the trained XGBoost model via a REST API for real-time predictions.

‚ú® Features

Real-time Threat Detection: Analyzes network data to classify it as benign or a specific type of threat.
High-Accuracy ML Model: Powered by a fine-tuned XGBoost classifier with ~95% accuracy on the CSE-CIC-IDS2018 dataset.
Interactive Dashboard: Uses Recharts to provide clear, real-time visualizations of network activity and detected threats.
Persistent Threat Logging: All detected threats are logged to a Supabase (PostgreSQL) database for auditing and historical analysis.

üõ†Ô∏è Technology Stack

Component
Technologies
Frontend
React, Vite, Recharts, Axios
Backend
Node.js, Express.js
Model Server
Python, Flask, Scikit-learn, XGBoost, Pandas
Database
Supabase (PostgreSQL)


‚öôÔ∏è Getting Started
Follow these instructions to get a copy of the project up and running on your local machine.
Prerequisites

Node.js (v18 or later)
Python (v3.9 or later)

Local Installation

Clone the repository:
Bash
git clone https://github.com/yaswanthkillampalli/cyber-threat-ai-agent.git
cd cyber-threat-ai-agent


Configure Environment Variables:
Create a .env file in the backend directory. You will need to add your Supabase credentials.
Ini, TOML
# backend/.env
MODEL_API_URL=http://127.0.0.1:5000/
PORT=8000
USE_MOCK_MODEL=true
SUPABASE_URL=https://uvajtztgfejjhopfinue.supabase.co
SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InV2YWp0enRnZmVqamhvcGZpbnVlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY5MDg3MzIsImV4cCI6MjA3MjQ4NDczMn0.wm4v53yGaET2fadN2O_v2zIEsBH57J2ukcw6MW3ZHos
MODEL_API_URL_SINGLE=http://127.0.0.1:5000/predict/single
MODEL_API_URL_BATCH=http://127.0.0.1:5000/predict/batch

# frontend/.env
VITE_API_BASE_URL=‚Äùhttp://localhost:8000‚Äù
Run Frontend:
Bash
cd frontend
npm install
npm run dev
# Your React app is now running on http://localhost:5173


Run Backend:
Bash
cd backend
npm install
npm start
# Your Node.js server is now running on http://localhost:8000


Run Model-Server:
Bash
cd model-server
pip install -r requirements.txt
python app.py
# Your Flask server is now running on http://localhost:5000



üìú License

This project is licensed under the MIT License - see the LICENSE.md file for details.
